module TestEGraphGATs 

using EGraphPrograms
using GATlab, Test, Catlab

@theory ThCategory begin
  @op begin
    (→) := Hom
    (⋅) := compose
  end
  Ob::TYPE
  Hom(dom::Ob, codom::Ob)::TYPE
  id(A::Ob)::(A → A)
  compose(f::(A → B), g::(B → C))::(A → C) ⊣ [A::Ob, B::Ob, C::Ob]
  (f ⋅ g) ⋅ h == f ⋅ (g ⋅ h) ⊣ [A::Ob, B::Ob, C::Ob, D::Ob,
                                f::(A → B), g::(B → C), h::(C → D)]
  f ⋅ id(B) == f ⊣ [A::Ob, B::Ob, f::(A → B)]
  id(A) ⋅ f == f ⊣ [A::Ob, B::Ob, f::(A → B)]
end

T = ThCategory.Meta.theory


# Autogenerated programs from theory
####################################

# Axiom programs
#---------------
(obprog, homprog),(idprog, cmpprog),(idlprog, idrprog, ascprog) = 
  tys, tcs, axs = theory_programs(T)

# Example input
################

# initialize
#-----------

xterm = :(id(x) ⋅ p ⋅ q)

xterm′ = fromexpr(T, :($xterm ⊣ [
                       (x,y,z)::Ob, p::Hom(x,y), q::Hom(y,z)]), 
                 TermInCtx)

b, G = NaiveBackend(), EGraph()
xid = to_e_graph(T, b, G, xterm′)
saturate!(b, T, G)
to_graphviz(G, [extract(G, xid), :p, :(id(x))]) 

interpret!(b, homprog, G)
t = :(dom(compose(id(x), compose(p, compose(q, id(z))))))
term_add(G, t)
saturate!(b, T, G)
@test eq(G, :x, t)

ts = [:(compose(compose(compose(id(x),p), q), compose(id(z),id(z)))), :(compose(p, q))]

term_add.(Ref(G), ts)
saturate!(b, T, G)

@test eq(G, ts...)

# Validating morphisms of GATs 
##############################

@theorymap SwapMonoid(ThMonoid, ThMonoid) begin
  default => default
  x⋅y ⊣ [x, y] => y⋅x
  e() => e()
end

@theorymap OpCat(ThCategory, ThCategory) begin
  Ob => Ob
  Hom(dom, codom) ⊣ [dom::Ob, codom::Ob] => Hom(codom, dom)
  id(a) ⊣ [a::Ob] => id(a)
  compose(f,g) ⊣ [(a,b,c)::Ob, f::Hom(a,b), g::Hom(b,c)] => compose(g, f)
end

# @test validate(SwapMonoid) # TOO SLOW

@test validate(OpCat)

end # module
